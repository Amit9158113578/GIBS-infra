input {
  file {
    path => "/usr/share/data/gbis-application-covid-19-vaccination-tracker-file-upload/vaccination_report/*.csv"
    start_position => "beginning"
#    sincedb_path => "/usr/share/logstash/data/sincedb_covid19-vaccination"
    sincedb_path => "/dev/null"
    stat_interval =>  "1 minute"
  }
}

filter {
    csv {
      separator => ","
      skip_empty_columns => true
      skip_empty_rows => true
      skip_header => "true"
      columns => [ 
        "Location Name",
        "Appointment Time",
        "Appointment Time Hour",
        "Processed On",
        "Processed On Hour",
        "Manufacturer Name",
        "Disease Name",
        "Product Name",
        "Lot Number",
        "Dose Ml",
        "Procedure Outcome",
        "Administered On",
        "Registrant Code",
        "First Name",
        "Last Name",
        "National ID/Passport No",
        "Province",
        "Sector",
        "District",
        "Cell",
        "Village",
        "Date of Birth",
        "Gender"
      ]
	  }


# The skip header attribute does not always work as expected in csv filter. To make sure, the header row will be dropped, following filter will be used. 
    if ([Gender] == "Gender" and [Date of Birth] == "Date of Birth") {
        drop { }
    } else {
      date {
        match => [ "Processed On", "dd.MM.yy HH:mm", "M/d/yyyy HH:mm", "M/d/yy HH:mm", "MM/dd/yyyy HH:mm", "MM/dd/yy HH:mm", "ISO8601"]
        target => "Processed On"
      }
      date {
        match => [ "Appointment Time", "dd.MM.yy HH:mm", "M/d/yyyy HH:mm", "M/d/yy HH:mm", "MM/dd/yyyy HH:mm", "MM/dd/yy HH:mm", "ISO8601"]
        target => "Appointment Time"
      }
      date {
        match => [ "Administered On", "dd.MM.yy", "M/d/yy", "M/d/yyyy", "ISO8601"]
        target => "Administered On"
      }
      date {
        match => [ "Date of Birth", "dd.MM.yy", "M/d/yy", "M/d/yyyy", "ISO8601"]
        target => "Date of Birth"
      }

      mutate {
        id => "convert"
        convert => { "Dose Ml" => "float"}
        convert => { "Appointment Time Hour" => "integer"}
        convert => { "Processed on Hour" => "integer"}
      }
    }

# Capitalize the first letter in each Word
    
    ruby {
        id => "capitalize"
        code => "
            [
              'Province',
              'Sector',
              'District',
              'Cell',
              'Village',
              'Manufacturer Name',
              'Disease Name',
              'Product Name',
              'First Name',
              'Last Name'
            ].each {|element|
              value = event.get(element)
              if value != nil
                event.set(element, value.split(' ').map(&:capitalize).join(' '))
              end
            }
        "
    }
    if ![tags] {
      mutate {
        id => "remove_message"
        remove_field => ["message"]	
      }
    }
}

output {
	stdout {codec => rubydebug}
  if ![tags] {
    elasticsearch {
      id => "output_success"
      hosts => "https://risa-dwh1-es01:9200"
      cacert => "${ELK_SSL_CERTIFICATE_AUTHORITY_FILE}"
      user => "${ELK_ELASTICSEARCH_USERNAME}"
      password => "${ELK_ELASTICSEARCH_PASSWORD}"
      index => "rbc.covid19-vaccination.report.import" 
      document_id => "%{Registrant Code}"
    }
  } else {
    elasticsearch {
      id => "output_error"
      hosts => "https://risa-dwh1-es01:9200"
      cacert => "${ELK_SSL_CERTIFICATE_AUTHORITY_FILE}"
      user => "${ELK_ELASTICSEARCH_USERNAME}"
      password => "${ELK_ELASTICSEARCH_PASSWORD}"
      index => "rbc.covid19-vaccination.report.import.error"  
    }
  }
}
